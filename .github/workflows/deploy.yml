name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

env:
  AWS_REGION: eu-west-2

jobs:
  # CI Job: Build, test, and audit (runs on PR creation/updates)
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 7

      - name: Start local server for Lighthouse
        run: |
          npx serve -s dist -l 3000 &
          sleep 5
          curl http://localhost:3000 || exit 1

      - name: Run Lighthouse CI - Desktop
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/gas-detection-instruments
            http://localhost:3000/calibration-gases
            http://localhost:3000/services
            http://localhost:3000/contact
            http://localhost:3000/certificates
            http://localhost:3000/spare-parts
            http://localhost:3000/404
          configPath: ./.github/lighthouse/lighthouserc.json
          runs: 1

      - name: Run Lighthouse CI - Mobile
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/gas-detection-instruments
            http://localhost:3000/calibration-gases
            http://localhost:3000/services
            http://localhost:3000/contact
            http://localhost:3000/certificates
            http://localhost:3000/spare-parts
            http://localhost:3000/404
          configPath: ./.github/lighthouse/lighthouserc-mobile.json
          runs: 1

      - name: Check Lighthouse output directory (CI)
        if: always()
        run: |
          echo "Checking for Lighthouse output directory..."
          ls -la
          if [ -d ".lighthouseci" ]; then
            echo "Found .lighthouseci directory:"
            ls -la .lighthouseci/
            echo "Creating lighthouse-reports directory for artifact upload..."
            mkdir -p lighthouse-reports
            cp -r .lighthouseci/* lighthouse-reports/
            echo "Contents of lighthouse-reports:"
            ls -la lighthouse-reports/
          else
            echo "No .lighthouseci directory found"
          fi

      - name: Upload Lighthouse reports (CI - Desktop & Mobile)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-ci-reports-desktop-mobile
          path: lighthouse-reports/
          retention-days: 7
  # Deploy Job: Only runs when PR is merged to main (push to main)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"
          terraform_wrapper: false

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      - name: Get Terraform Outputs
        id: terraform
        working-directory: terraform
        run: |
          echo "s3-bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront-id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "website-url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT

      - name: Deploy to S3
        run: |
          # Sync all files except index.html with long cache headers
          aws s3 sync dist/ s3://${{ steps.terraform.outputs.s3-bucket }} \
            --exclude "index.html" \
            --exclude "*.map" \
            --cache-control "public, max-age=31536000, immutable" \
            --delete
            
          # Upload index.html with no-cache headers for SPA routing
          aws s3 cp dist/index.html s3://${{ steps.terraform.outputs.s3-bucket }}/index.html \
            --cache-control "public, max-age=0, must-revalidate" \
            --content-type "text/html"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.terraform.outputs.cloudfront-id }} \
            --paths "/*"

      - name: Deployment complete
        run: |
          echo "üöÄ Deployment successful!"
          echo "Website URL: ${{ steps.terraform.outputs.website-url }}"
  production-audit:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"
          terraform_wrapper: false

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      - name: Get website URL
        id: terraform
        working-directory: terraform
        run: |
          echo "website-url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT

      - name: Wait for CloudFront deployment
        run: |
          echo "‚è≥ Waiting 90 seconds for CloudFront cache invalidation..."
          sleep 90

      - name: Run Production Lighthouse Audit - Desktop
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.terraform.outputs.website-url }}
            ${{ steps.terraform.outputs.website-url }}/gas-detection-instruments
            ${{ steps.terraform.outputs.website-url }}/calibration-gases
            ${{ steps.terraform.outputs.website-url }}/services
            ${{ steps.terraform.outputs.website-url }}/contact
            ${{ steps.terraform.outputs.website-url }}/certificates
            ${{ steps.terraform.outputs.website-url }}/spare-parts
            ${{ steps.terraform.outputs.website-url }}/404
            ${{ steps.terraform.outputs.website-url }}/calibration-gases/regulator/700
            ${{ steps.terraform.outputs.website-url }}/calibration-gases/regulator/2000
            ${{ steps.terraform.outputs.website-url }}/gas-detection-instrument/rki/gx-2012
            ${{ steps.terraform.outputs.website-url }}/gas-detection-instrument/gmi/ps-200
          configPath: ./.github/lighthouse/lighthouserc-production.json
          runs: 1

      - name: Run Production Lighthouse Audit - Mobile
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ steps.terraform.outputs.website-url }}
            ${{ steps.terraform.outputs.website-url }}/gas-detection-instruments
            ${{ steps.terraform.outputs.website-url }}/calibration-gases
            ${{ steps.terraform.outputs.website-url }}/services
            ${{ steps.terraform.outputs.website-url }}/contact
            ${{ steps.terraform.outputs.website-url }}/certificates
            ${{ steps.terraform.outputs.website-url }}/spare-parts
            ${{ steps.terraform.outputs.website-url }}/404
            ${{ steps.terraform.outputs.website-url }}/calibration-gases/regulator/700
            ${{ steps.terraform.outputs.website-url }}/calibration-gases/regulator/2000
            ${{ steps.terraform.outputs.website-url }}/gas-detection-instrument/rki/gx-2012
            ${{ steps.terraform.outputs.website-url }}/gas-detection-instrument/gmi/ps-200
          configPath: ./.github/lighthouse/lighthouserc-production-mobile.json
          runs: 1

      - name: Check Lighthouse output directory
        if: always()
        run: |
          echo "Checking for Lighthouse output directory..."
          ls -la
          if [ -d ".lighthouseci" ]; then
            echo "Found .lighthouseci directory:"
            ls -la .lighthouseci/
            echo "Creating lighthouse-reports directory for artifact upload..."
            mkdir -p lighthouse-reports
            cp -r .lighthouseci/* lighthouse-reports/
            echo "Contents of lighthouse-reports:"
            ls -la lighthouse-reports/
          else
            echo "No .lighthouseci directory found"
          fi

      - name: Upload Production Lighthouse Reports (Desktop & Mobile)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-production-reports-desktop-mobile
          path: lighthouse-reports/
          retention-days: 30
